version: "3.0"

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./services/broker/data/:/var/lib/rabbitmq/
      - ./services/broker/log/:/var/log/rabbitmq

  postgres:
    image: postgres:11-alpine
    container_name: postgres
    volumes:
      - ./services/postgres/init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"

  pgbouncer:
    image: bitnami/pgbouncer:1.19.1-debian-11-r4
    container_name: pgbouncer
    ports:
      - "6432:6432"
    depends_on:
      - postgres
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_DATABASE: db_paranoid
      POSTGRESQL_USERNAME: paranoid
      POSTGRESQL_PASSWORD: development
      PGBOUNCER_DATABASE: db_paranoid

  auth:
    container_name: auth
    build:
      context: ./services/auth
      dockerfile: ../../docker/auth.Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./services/auth:/home/node/app
      - ./shared:/home/node/app/shared
    restart: on-failure
    command: npm run dev

  auth.business:
    container_name: auth.business
    build:
      context: ./services/auth.business
      dockerfile: ../../docker/auth.business.Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./services/auth.business:/home/node/app
      - ./shared:/home/node/app/shared
    restart: on-failure
    command: npm run dev

  frontend:
    container_name: frontend
    build:
      context: ./services/frontend
      dockerfile: ../../docker/frontend.Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./services/frontend:/home/node/app
    restart: on-failure
    command: npm start
